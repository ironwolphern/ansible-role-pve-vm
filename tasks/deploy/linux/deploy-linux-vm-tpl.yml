---
- name: "Check if VM exists | Deploy | {{ _title_pfx }}"
  community.general.proxmox_vm_info:
    api_host: "{{ pve_vm__api_host }}"
    api_user: "{{ pve_vm__api_user }}"
    api_password: "{{ pve_vm__api_password }}"
    validate_certs: "{{ pve_vm__validate_certs }}"
    name: "{{ pve_vm__vm_settings.name }}"
    node: "{{ pve_vm__node }}"
  register: _vm_info

- name: "If VM not exists | Deploy | {{ _title_pfx }}"
  when: _vm_info.proxmox_vms | length == 0
  block:
    - name: "Create VM | Deploy | {{ _title_pfx }}"
      community.general.proxmox_kvm:
        api_host: "{{ pve_vm__api_host }}"
        api_user: "{{ pve_vm__api_user }}"
        api_password: "{{ pve_vm__api_password }}"
        validate_certs: "{{ pve_vm__validate_certs }}"
        node: "{{ pve_vm__node }}"
        name: "{{ pve_vm__vm_settings.name }}"
        clone: "{{ pve_vm__vm_settings.clone }}"
        full: true
        storage: "{{ pve_vm__vm_settings.storage }}"
        state: "present"
        timeout: 300
      register: _vm_id

    - name: "Configure VM settings | Deploy | {{ _title_pfx }}"
      community.general.proxmox_kvm:
        api_host: "{{ pve_vm__api_host }}"
        api_user: "{{ pve_vm__api_user }}"
        api_password: "{{ pve_vm__api_password }}"
        validate_certs: "{{ pve_vm__validate_certs }}"
        node: "{{ pve_vm__node }}"
        name: "{{ pve_vm__vm_settings.name }}"
        cores: "{{ pve_vm__vm_settings.cores }}"
        sockets: "{{ pve_vm__vm_settings.sockets }}"
        memory: "{{ pve_vm__vm_settings.memory }}"
        update: true

    - name: "If VM is debian family | Deploy | {{ _title_pfx }}"
      when: pve_vm__vm_os_name == "debian" or pve_vm__vm_os_name == "ubuntu"
      block:
        - name: "Generate user-data | Deploy | {{ _title_pfx }}"
          ansible.builtin.template:
            src: "cloud-init/debian/user-data-deb.j2"
            dest: "{{ _tmp_dir.path }}/user-data"
            mode: "0644"

        - name: "Generate network-config | Deploy | {{ _title_pfx }}"
          ansible.builtin.template:
            src: "cloud-init/debian/network-config-deb.j2"
            dest: "{{ _tmp_dir.path }}/network-config"
            mode: "0644"

    - name: "If VM is RedHat family | Deploy | {{ _title_pfx }}"
      when: pve_vm__vm_os_name == "centos" or pve_vm__vm_os_name == "fedora"
      block:
        - name: "Generate user-data | Deploy | {{ _title_pfx }}"
          ansible.builtin.template:
            src: "cloud-init/redhat/user-data-rhel.j2"
            dest: "{{ _tmp_dir.path }}/user-data"
            mode: "0644"

        - name: "Generate network-config | Deploy | {{ _title_pfx }}"
          ansible.builtin.template:
            src: "cloud-init/redhat/network-config-rhel.j2"
            dest: "{{ _tmp_dir.path }}/network-config"
            mode: "0644"

    - name: "Copy user-data and network-config to Proxmox VE | Deploy | {{ _title_pfx }}"
      ansible.builtin.copy:
        src: "{{ _tmp_dir.path }}/{{ item }}"
        dest: "{{ _host_snippets }}/{{ item }}"
        mode: "0644"
      delegate_to: "{{ pve_vm__api_host }}"
      loop:
        - "user-data"
        - "network-config"

    - name: "Configure Cloud-init settings | Deploy | {{ _title_pfx }}"
      community.general.proxmox_kvm:
        api_host: "{{ pve_vm__api_host }}"
        api_user: "{{ pve_vm__api_user }}"
        api_password: "{{ pve_vm__api_password }}"
        validate_certs: "{{ pve_vm__validate_certs }}"
        node: "{{ pve_vm__node }}"
        name: "{{ pve_vm__vm_settings.name }}"
        cicustom: "user=local:snippets/user-data,network=local:snippets/network-config"
        update: true

    - name: "Resize disk to new size | Deploy | {{ _title_pfx }}"
      ansible.builtin.command:
        cmd: "qm disk resize {{ _vm_id.vmid }} scsi0 {{ pve_vm__vm_settings.disk_size }}G"
      delegate_to: "{{ pve_vm__api_host }}"
      changed_when: false

# ALTERNATIVE WAY TO RESIZE DISK (LESS ACCURATE)
#    - name: "Resize disk to new size | Deploy | {{ _title_pfx }}"
#      community.general.proxmox_disk:
#        api_host: "{{ pve_vm__api_host }}"
#        api_user: "{{ pve_vm__api_user }}"
#        api_password: "{{ pve_vm__api_password }}"
#        validate_certs: "{{ pve_vm__validate_certs }}"
#        name: "{{ pve_vm__vm_settings.name }}"
#        disk: "scsi0"
#        size: "+{{ pve_vm__vm_settings.disk_size }}G"
#        state: "resized"

    - name: "Start VM | Deploy | {{ _title_pfx }}"
      community.general.proxmox_kvm:
        api_host: "{{ pve_vm__api_host }}"
        api_user: "{{ pve_vm__api_user }}"
        api_password: "{{ pve_vm__api_password }}"
        validate_certs: "{{ pve_vm__validate_certs }}"
        node: "{{ pve_vm__node }}"
        name: "{{ pve_vm__vm_settings.name }}"
        state: "started"

    - name: "Wait for VM to be started | Deploy | {{ _title_pfx }}"
      ansible.builtin.shell:
        cmd: "qm guest cmd {{ _vm_id.vmid }} network-get-interfaces | jq -r '.[] | select(.name == \"ens18\") | .[\"ip-addresses\"][] | select(.[\"ip-address-type\"] == \"ipv4\") | .[\"ip-address\"]'"
      register: _vm_ip
      until: _vm_ip.stdout != ""
      retries: 20
      delay: 30
      delegate_to: "{{ pve_vm__api_host }}"
      changed_when: false

    - name: "Stop VM | Deploy | {{ _title_pfx }}"
      community.general.proxmox_kvm:
        api_host: "{{ pve_vm__api_host }}"
        api_user: "{{ pve_vm__api_user }}"
        api_password: "{{ pve_vm__api_password }}"
        validate_certs: "{{ pve_vm__validate_certs }}"
        node: "{{ pve_vm__node }}"
        name: "{{ pve_vm__vm_settings.name }}"
        state: "stopped"
        force: "{{ pve_vm__vm_force_stop }}"
        timeout: 300

    - name: "Remove cloud-init settings | Deploy | {{ _title_pfx }}"
      community.general.proxmox_kvm:
        api_host: "{{ pve_vm__api_host }}"
        api_user: "{{ pve_vm__api_user }}"
        api_password: "{{ pve_vm__api_password }}"
        validate_certs: "{{ pve_vm__validate_certs }}"
        node: "{{ pve_vm__node }}"
        name: "{{ pve_vm__vm_settings.name }}"
        delete: "ide2"

    - name: "Remove user-data and network-config from Proxmox VE | Deploy | {{ _title_pfx }}"
      ansible.builtin.file:
        path: "{{ _host_snippets }}/{{ item }}"
        state: "absent"
      delegate_to: "{{ pve_vm__api_host }}"
      loop:
        - "user-data"
        - "network-config"

    - name: "Add Description to VM | Deploy | {{ _title_pfx }}"
      community.general.proxmox_kvm:
        api_host: "{{ pve_vm__api_host }}"
        api_user: "{{ pve_vm__api_user }}"
        api_password: "{{ pve_vm__api_password }}"
        validate_certs: "{{ pve_vm__validate_certs }}"
        node: "{{ pve_vm__node }}"
        name: "{{ pve_vm__vm_settings.name }}"
        description: "{{ pve_vm__vm_settings.description }}"
        update: true
      when: pve_vm__vm_settings.description is defined and pve_vm__vm_settings.description | length > 0

    - name: "Add Tags to VM | Deploy | {{ _title_pfx }}"
      community.general.proxmox_kvm:
        api_host: "{{ pve_vm__api_host }}"
        api_user: "{{ pve_vm__api_user }}"
        api_password: "{{ pve_vm__api_password }}"
        validate_certs: "{{ pve_vm__validate_certs }}"
        node: "{{ pve_vm__node }}"
        name: "{{ pve_vm__vm_settings.name }}"
        tags: "{{ pve_vm__vm_settings.tags }}"
        update: true
      when: pve_vm__vm_settings.tags is defined and pve_vm__vm_settings.tags | length > 0

    - name: "Protect VM from deletion | Deploy | {{ _title_pfx }}"
      community.general.proxmox_kvm:
        api_host: "{{ pve_vm__api_host }}"
        api_user: "{{ pve_vm__api_user }}"
        api_password: "{{ pve_vm__api_password }}"
        validate_certs: "{{ pve_vm__validate_certs }}"
        node: "{{ pve_vm__node }}"
        name: "{{ pve_vm__vm_settings.name }}"
        protection: true
        update: true

    - name: "Start VM | Deploy | {{ _title_pfx }}"
      community.general.proxmox_kvm:
        api_host: "{{ pve_vm__api_host }}"
        api_user: "{{ pve_vm__api_user }}"
        api_password: "{{ pve_vm__api_password }}"
        validate_certs: "{{ pve_vm__validate_certs }}"
        node: "{{ pve_vm__node }}"
        name: "{{ pve_vm__vm_settings.name }}"
        state: "started"

    - name: "Wait for VM to be started | Deploy | {{ _title_pfx }}"
      ansible.builtin.shell:
        cmd: "qm guest cmd {{ _vm_id.vmid }} network-get-interfaces | jq -r '.[] | select(.name == \"ens18\") | .[\"ip-addresses\"][] | select(.[\"ip-address-type\"] == \"ipv4\") | .[\"ip-address\"]'"
      register: _vm_ip
      until: _vm_ip.stdout != ""
      retries: 20
      delay: 30
      delegate_to: "{{ pve_vm__api_host }}"
      changed_when: false

    - name: "Print VM IP | Deploy | {{ _title_pfx }}"
      ansible.builtin.debug:
        msg:
          - "VM deployed details:"
          - "   Name:  {{ pve_vm__vm_settings.name }}"
          - "   VM ID: {{ _vm_id.vmid }}"
          - "   IP:    {{ _vm_ip.stdout }}"

- name: "If VM exists | Deploy | {{ _title_pfx }}"
  when: _vm_info.proxmox_vms | length > 0
  ansible.builtin.debug:
    msg: "VM with name: '{{ pve_vm__vm_settings.name }}' already exists"
